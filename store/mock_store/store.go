// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/zeina1i/ethpay/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockStore) AddAddress(address *model.Address) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", address)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockStoreMockRecorder) AddAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockStore)(nil).AddAddress), address)
}

// AddHDWallet mocks base method.
func (m *MockStore) AddHDWallet(hdWallet *model.HDWallet) (*model.HDWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHDWallet", hdWallet)
	ret0, _ := ret[0].(*model.HDWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHDWallet indicates an expected call of AddHDWallet.
func (mr *MockStoreMockRecorder) AddHDWallet(hdWallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHDWallet", reflect.TypeOf((*MockStore)(nil).AddHDWallet), hdWallet)
}

// AddMerchant mocks base method.
func (m *MockStore) AddMerchant(merchant *model.Merchant) (*model.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMerchant", merchant)
	ret0, _ := ret[0].(*model.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMerchant indicates an expected call of AddMerchant.
func (mr *MockStoreMockRecorder) AddMerchant(merchant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMerchant", reflect.TypeOf((*MockStore)(nil).AddMerchant), merchant)
}

// AddTx mocks base method.
func (m *MockStore) AddTx(tx *model.Tx) (*model.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTx", tx)
	ret0, _ := ret[0].(*model.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTx indicates an expected call of AddTx.
func (mr *MockStoreMockRecorder) AddTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*MockStore)(nil).AddTx), tx)
}

// GetAddress mocks base method.
func (m *MockStore) GetAddress(address string) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", address)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockStoreMockRecorder) GetAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStore)(nil).GetAddress), address)
}

// GetHDWallet mocks base method.
func (m *MockStore) GetHDWallet(xPub string) (*model.HDWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHDWallet", xPub)
	ret0, _ := ret[0].(*model.HDWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHDWallet indicates an expected call of GetHDWallet.
func (mr *MockStoreMockRecorder) GetHDWallet(xPub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHDWallet", reflect.TypeOf((*MockStore)(nil).GetHDWallet), xPub)
}

// GetMerchant mocks base method.
func (m *MockStore) GetMerchant(email string) (*model.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchant", email)
	ret0, _ := ret[0].(*model.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchant indicates an expected call of GetMerchant.
func (mr *MockStoreMockRecorder) GetMerchant(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchant", reflect.TypeOf((*MockStore)(nil).GetMerchant), email)
}

// InitializeDB mocks base method.
func (m *MockStore) InitializeDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeDB indicates an expected call of InitializeDB.
func (mr *MockStoreMockRecorder) InitializeDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeDB", reflect.TypeOf((*MockStore)(nil).InitializeDB))
}
